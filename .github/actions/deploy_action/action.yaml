name: 'Deploy Action'
description: 'This is my reusable action'
inputs:
  flavor:
    description: 'flavor'
    required: true
    default: 'blink'

  ssh_private_key:
    description: 'this is SSH private key to access private repo'

  key_store:
    description: 'this is Blink key store file base 64'
  store_password:
    description: 'this is Blink store password'
  key_password:
    description: 'this is Blink key password'
  key_alias:
    description: 'this is Blink key alias'

  blink_key_store:
    description: 'this is Blink key store file base 64'
  blink_store_password:
    description: 'this is Blink store password'
  blink_key_password:
    description: 'this is Blink key password'
  blink_key_alias:
    description: 'this is Blink key alias'

  unity_key_store:
    description: 'this is Unity key store file base 64'
  unity_store_password:
    description: 'this is Unity store password'
  unity_key_password:
    description: 'this is Unity key password'
  unity_key_alias:
    description: 'this is Unity key alias'

  sportico_key_store:
    description: 'this is Sportico key store file base 64'
  sportico_store_password:
    description: 'this is Sportico store password'
  sportico_key_password:
    description: 'this is Sportico key password'
  sportico_key_alias:
    description: 'this is Sportico key alias'

  firebase_file:
    description: 'this is firebase google service file base 64'
  firebase_app_id:
    description: 'this project app is on firebase'
  credential_file_content:
    description: 'this is Firebase app Distribution service credentials file content'

  playStore_account_key:
    description: 'this is Google play deploy service credentials file content'
  package_id:
    description: 'this is app package id'

  release_type:
    description: 'this is where want release app'
  development_server:
    description: 'this server that app connect with'
  release_note:
    description: 'this app release note on Firebase app distribution'

runs:
  using: "composite"
  steps:

    # Make sure the @v0.8.0 matches the current version of the action
    - uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ inputs.ssh_private_key }}


    - name: Download Android keystore
      id: android_keystore
      uses: timheuer/base64-to-file@v1.0.3
      with:
        fileName: keystore.jks
        encodedString: ${{ inputs.key_store }}


    - name: Download blink Android keystore
      id: android_blink_keystore
      uses: timheuer/base64-to-file@v1.0.3
      with:
        fileName: blink-keystore.jks
        encodedString: ${{ inputs.blink_key_store }}

    - name: Download unity Android keystore
      id: android_unity_keystore
      uses: timheuer/base64-to-file@v1.0.3
      with:
        fileName: unity-keystore.jks
        encodedString: ${{ inputs.unity_key_store }}

    - name: Download sportico Android keystore
      id: android_sportico_keystore
      uses: timheuer/base64-to-file@v1.0.3
      with:
        fileName: sportico-keystore.jks
        encodedString: ${{ inputs.sportico_key_store }}


    - name: Create key.properties
      run: |
        echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
        echo "storePassword=${{ inputs.store_password }}" >> android/key.properties
        echo "keyPassword=${{ inputs.key_password }}" >> android/key.properties
        echo "keyAlias=${{ inputs.key_alias }}" >> android/key.properties
        
        echo "storeFile=${{ steps.android_blink_keystore.outputs.filePath }}" > android/key1.properties
        echo "storePassword=${{ inputs.blink_store_password }}" >> android/key1.properties
        echo "keyPassword=${{ inputs.blink_key_password }}" >> android/key1.properties
        echo "keyAlias=${{ inputs.blink_key_alias }}" >> android/key1.properties
        
        echo "storeFile=${{ steps.android_unity_keystore.outputs.filePath }}" > android/key2.properties
        echo "storePassword=${{ inputs.unity_store_password }}" >> android/key2.properties
        echo "keyPassword=${{ inputs.unity_key_password }}" >> android/key2.properties
        echo "keyAlias=${{ inputs.unity_key_alias }}" >> android/key2.properties
        
        echo "storeFile=${{ steps.android_sportico_keystore.outputs.filePath }}" > android/key3.properties
        echo "storePassword=${{ inputs.sportico_store_password }}" >> android/key3.properties
        echo "keyPassword=${{ inputs.sportico_key_password }}" >> android/key3.properties
        echo "keyAlias=${{ inputs.sportico_key_alias }}" >> android/key3.properties
      shell: bash

    - uses: actions/setup-java@v1
      with:
        distribution: 'zulu'
        java-version: "17"
        cache: gradle
        check-latest: true

    - uses: subosito/flutter-action@v1
      with:
        flutter-version: "3.16.1"
        channel: 'stable'
        cache: true

    - name: Download firebase google services file
      run: echo "${{inputs.firebase_file}}" | base64 -d > android/app/src/${{ inputs.flavor }}/google-services.json
      shell: bash


    - name: Get dependencies
      run: flutter pub get
      shell: bash

    - name: Start Android Release Build
      if: contains("${{ inputs.release_type }}", 'firebase')
      run: flutter build apk --flavor ${{ inputs.flavor }} -t lib/main.dart
      shell: bash



    # Build bundle blink
    - name: Start Android Release Bundle
      if: contains("${{ inputs.release_type }}", 'store')
      run: flutter build appbundle --flavor ${{ inputs.flavor }} -t lib/main.dart
      shell: bash

    # Upload Android Apk
    - name: Upload Android Release
      if: contains("${{ inputs.release_type }}", 'firebase')
      uses: actions/upload-artifact@v2
      with:
        name: android-${{ inputs.flavor }}-release
        path: build/app/outputs/flutter-apk/app-${{ inputs.flavor }}-release.apk

    # Upload Android Apk
    - name: Upload Android bundle Release
      if: contains("${{ inputs.release_type }}", 'store')
      uses: actions/upload-artifact@v2
      with:
        name: android-bundle-${{ inputs.flavor }}-release
        path: build/app/outputs/bundle/${{ inputs.flavor }}Release/app-${{ inputs.flavor }}-release.aab

        # Distribution Flavor
    - name: Firebase App Distribution
      if: contains("${{ inputs.release_type }}", 'firebase')
      uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
      with:
        appId: ${{inputs.firebase_app_id}}
        serviceCredentialsFileContent: ${{ inputs.credential_file_content }}
        groups: testers
        file: build/app/outputs/flutter-apk/app-${{ inputs.flavor }}-release.apk
        releaseNotes: "${{ inputs.flavor }} Apk \n ${{ inputs.development_server }} \n ${{ inputs.release_note }}"
        #          releaseNotes:  "${{ github.event.head_commit.message }}"


    #deploy to google play
    - name: Release Build to internal track
      if: contains("${{ inputs.release_type }}", 'store')
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{inputs.playStore_account_key}}
        packageName: ${{inputs.package_id}}
        releaseFiles: build/app/outputs/bundle/${{ inputs.flavor }}Release/app-${{ inputs.flavor }}-release.aab
        track: production
        status: completed
