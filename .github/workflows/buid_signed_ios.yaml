on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master
      - develop
name: "Build IOS"
env:
  #      versions
  BLINK_IOS_VERSION_NAME: "1.0.3"
  BLINK_IOS_BUILD_NUMBER: "3"

  UNITY_IOS_VERSION_NAME: "1.0.9"
  UNITY_IOS_BUILD_NUMBER: "9"




jobs:

  initialize_build:
    name: Initialize Build
    runs-on: macos-latest
    #    outputs:
    #      CERTIFICATE_PATH: ${{ steps.cert.outputs.CERTIFICATE_PATH }}
    env:
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      BUILD_CERTIFICATE_BASE64: ${{secrets.BUILD_CERTIFICATE_BASE64}}
    steps:
      - uses: actions/checkout@v2
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.1"
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run:  flutter pub get

      - name: Add Certificate File
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          echo "$BUILD_CERTIFICATE_BASE64" | base64 -d > $CERTIFICATE_PATH

      - name: Create Keychain
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Install the Apple certificate
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH





  build_blink:
    name: Build IOS - Blink
    runs-on: macos-latest
    environment: hallo
    needs: initialize_build
    env:
      BUILD_CERTIFICATE_BASE64: ${{secrets.BUILD_CERTIFICATE_BASE64}}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      EXPORT_OPTIONS_BASE64: ${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}
    if: (!contains(github.event.head_commit.message, 'ignore')&& contains(github.event.head_commit.message, 'ios blink') || contains(github.event.head_commit.message, 'all'))
    steps:
      - uses: actions/checkout@v2

#      - uses: webfactory/ssh-agent@v0.8.0
#        with:
#          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#
#      - uses: subosito/flutter-action@v1
#        with:
#          flutter-version: "3.16.1"
#          channel: 'stable'
#          cache: true
#      - name: Get dependencies
#        run:  flutter pub get
#        Install the Apple certificate and provisioning profile
#      - name: Add Certificate File
#        run: |
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          echo "$BUILD_CERTIFICATE_BASE64" | base64 -d > $CERTIFICATE_PATH

      - name: Add Profile File
        run: |
          PP_PATH=$RUNNER_TEMP/blink_ci.mobileprovision
          echo "$BUILD_PROVISION_PROFILE_BASE64" | base64 -d > $PP_PATH

      - name: Add ExportOptions File
        run: |
          EXPORT_OPTIONS_PATH="ios/Runner/ExportOptionsBlink.plist"
          echo -n "$EXPORT_OPTIONS_BASE64" | base64 -d > $EXPORT_OPTIONS_PATH

#      - name: Create Keychain
#        run: |
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#      - name: Install the Apple certificate
#        run: |
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Install Apple Profile
        run: |
          PP_PATH=$RUNNER_TEMP/blink_ci.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

        #Build
      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptionsBlink.plist --flavor blink --build-name=${{env.BLINK_IOS_VERSION_NAME}} --build-number=${{env.BLINK_IOS_BUILD_NUMBER}}

      # Collect the file and upload as artifact
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa
          # Path to the release files
          path: build/ios/ipa/Blink.ipa


      - name:  Deploy to App Store  (Testflight)
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/ios/ipa/Blink.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}


      #Clean up keychain and provisioning profile
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/blink_ci.mobileprovision
          

  build_unity:
    name: Build IOS - Unity
    runs-on: macos-latest
    environment: unity
    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      EXPORT_OPTIONS_BASE64: ${{ secrets.IOS_EXPORT_OPTIONS_BASE64 }}
    if: (!contains(github.event.head_commit.message, 'ignore')&& contains(github.event.head_commit.message, 'ios unity') || contains(github.event.head_commit.message, 'all'))
    steps:
      - uses: actions/checkout@v2

      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.1"
          channel: 'stable'
          cache: true
      - name: Get dependencies
        run: flutter pub get
        #Install the Apple certificate and provisioning profile
      - name: Add Certificate File
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          echo "$BUILD_CERTIFICATE_BASE64" | base64 -d > $CERTIFICATE_PATH

      - name: Add Profile File
        run: |
          PP_PATH=$RUNNER_TEMP/unity_ci.mobileprovision
          echo "$BUILD_PROVISION_PROFILE_BASE64" | base64 -d > $PP_PATH

      - name: Add ExportOptions File
        run: |
          EXPORT_OPTIONS_PATH="ios/Runner/ExportOptionsUnity.plist"
          echo -n "$EXPORT_OPTIONS_BASE64" | base64 -d > $EXPORT_OPTIONS_PATH

      - name: Create Keychain
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Install the Apple certificate
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Install Apple Profile
        run: |
          PP_PATH=$RUNNER_TEMP/unity_ci.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        #Build
      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --flavor unity --export-options-plist=ios/Runner/ExportOptionsUnity.plist --build-name=${{env.UNITY_IOS_VERSION_NAME}} --build-number=${{env.UNITY_IOS_BUILD_NUMBER}}


      # Collect the file and upload as artifact
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa
          # Path to the release files
          path: build/ios/ipa/Unity.ipa


      - name:  Deploy to App Store  (Testflight)
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/ios/ipa/Unity.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}


      #Clean up keychain and provisioning profile
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/unity_ci.mobileprovision
          
