on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master
      - develop
name: "Build IOS"
jobs:
  build:
    name: Build IOS
    runs-on: macos-latest
    environment: hallo
    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: "3.16.1"
          channel: 'stable'
          cache: true
      - name: 📝 Edit pubspec version
        run: |
          sed -Ei "" "s/^version: (.*)/version: ${{ inputs.new-pubspec-version }}/" app/pubspec.yaml
      - name: Get dependencies
        run: flutter pub get
        #Install the Apple certificate and provisioning profile
      - name: Add Certificate File
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          echo "$BUILD_CERTIFICATE_BASE64" | base64 -d > $CERTIFICATE_PATH
      - name: Add Profile File
        run: |
          PP_PATH=$RUNNER_TEMP/ci.mobileprovision
          echo "$BUILD_PROVISION_PROFILE_BASE64" | base64 -d > $PP_PATH

      - name: Create Keychain
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Install the Apple certificate
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Install Apple Profile
        run: |
          PP_PATH=$RUNNER_TEMP/ci.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        #Build
      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
      # Collect the file and upload as artifact
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa
          # Path to the release files
          path: build/ios/ipa/gitaction.ipa
      # Collect the file and upload as artifact
#      - name: collect ipa files artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: release-ipa
#          # Path to the release files
#          path: build/ios/ipa/*

      - name:  Deploy to App Store  (Testflight)
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/ios/ipa/gitaction.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}


      #Clean up keychain and provisioning profile
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/ci.mobileprovision
          


  # Release job, upload the ipa to Firebase App Distribution
#  release:
#    name: Release ipa to Firebase
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#
#      # Retrieve ipa file from GitHub artifacts
#      - uses: actions/checkout@v2
#      - name: Get release-ipa from artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: release-ipa
#
#      # Upload ipa file to Fiebase
#      - name: Upload artifact to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
#        with:
#          appId: ${{secrets.FIREBASE_IOS_APP_ID}}
#          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
#          groups: ios-developers
#          file: your_app_name.ipa